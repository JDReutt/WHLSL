import Foundation

print("// This was autogenerated from Generate_Standard_Library.swift! Do not edit!!")
print()

for type in ["void", "bool", "uchar", "ushort", "uint", "char", "short", "int", "half", "float", "atomic_int", "atomic_uint"] {
    print("native typedef \(type);")
}
for type in ["bool", "uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
    for size in 2 ... 4 {
        print("native typedef vector<\(type), \(size)>;")
        print("native typedef \(type)\(size) = vector<\(type), \(size)>;")
    }
}

for type in ["half", "float"] {
    for i in 2 ... 4 {
        for j in 2 ... 4 {
            print("struct \(type)\(i)x\(j) {")
            for m in 0 ..< i {
                print("    \(type)\(j) row\(m);")
            }
            print("}")
            //print("typedef matrix<\(type), \(i), \(j)> = \(type)\(i)x\(j);")
        }
    }
}
print("native typedef sampler;")
for type in ["Texture1D", "RWTexture1D", "Texture1DArray", "RWTexture1DArray", "Texture2D", "RWTexture2D", "Texture2DArray", "RWTexture2DArray", "Texture3D", "RWTexture3D", "TextureCube"] {
    for typeArgumentBase in ["bool", "uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
        for size in ["", "2", "3", "4"] {
            print("native typedef \(type)<\(typeArgumentBase)\(size)>;")
        }
    }
}
for type in ["TextureDepth2D", "RWTextureDepth2D", "TextureDepth2DArray", "RWTextureDepth2DArray", "TextureDepthCube"] {
    for typeArgument in ["float", "half"] {
        print("native typedef \(type)<\(typeArgument)>;")
    }
}
print()

for type1 in ["uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
    for type2 in ["uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
        if (type1 == type2) {
            print("operator \(type1)(\(type2) x) {")
            print("    return x;")
            print("}")
        } else {
            print("native operator \(type1)(\(type2));")
        }
    }
}

print("operator bool(bool x) {")
print("    return x;")
print("}")

print("native operator int(atomic_int);")
print("native operator uint(atomic_uint);")

print("native bool operator==(bool, bool);")

print("bool operator&(bool a, bool b) {")
print("    return a && b;")
print("}")

print("bool operator|(bool a, bool b) {")
print("    return a || b;")
print("}")

print("bool operator^(bool a, bool b) {")
print("    if (a)")
print("        return !b;")
print("    return b;")
print("}")

print("bool operator~(bool value) {")
print("    return !value;")
print("}")

for type in ["int", "uint", "float"] {
    print("native \(type) operator+(\(type), \(type));")
    print("native \(type) operator-(\(type), \(type));")
    print("native \(type) operator*(\(type), \(type));")
    print("native \(type) operator/(\(type), \(type));")
    print("native bool operator==(\(type), \(type));")
    print("native bool operator<(\(type), \(type));")
    print("native bool operator<=(\(type), \(type));")
    print("native bool operator>(\(type), \(type));")
    print("native bool operator>=(\(type), \(type));")
}

for type in ["int", "uint"] {
    print("native \(type) operator&(\(type), \(type));")
    print("native \(type) operator|(\(type), \(type));")
    print("native \(type) operator^(\(type), \(type));")
    print("native \(type) operator~(\(type));")
    print("native \(type) operator<<(\(type), uint);")
    print("native \(type) operator>>(\(type), uint);")
}

for type in ["uchar", "ushort"] {
    print("\(type) operator+(\(type) a, \(type) b) {")
    print("    return \(type)(uint(a) + uint(b));")
    print("}")
    print("\(type) operator-(\(type) a, \(type) b) {")
    print("    return \(type)(uint(a) - uint(b));")
    print("}")
    print("\(type) operator*(\(type) a, \(type) b) {")
    print("    return \(type)(uint(a) * uint(b));")
    print("}")
    print("\(type) operator/(\(type) a, \(type) b) {")
    print("    return \(type)(uint(a) / uint(b));")
    print("}")
    print("\(type) operator&(\(type) a, \(type) b) {")
    print("    return \(type)(uint(a) & uint(b));")
    print("}")
    print("\(type) operator|(\(type) a, \(type) b) {")
    print("    return \(type)(uint(a) | uint(b));")
    print("}")
    print("\(type) operator^(\(type) a, \(type) b) {")
    print("    return \(type)(uint(a) ^ uint(b));")
    print("}")
    print("\(type) operator~(\(type) a) {")
    print("    return \(type)(~uint(a));")
    print("}")
    print("bool operator==(\(type) a, \(type) b) {")
    print("    return uint(a) == uint(b);")
    print("}")
    print("bool operator<(\(type) a, \(type) b) {")
    print("    return uint(a) < uint(b);")
    print("}")
    print("bool operator<=(\(type) a, \(type) b) {")
    print("    return uint(a) <= uint(b);")
    print("}")
    print("bool operator>(\(type) a, \(type) b) {")
    print("    return uint(a) > uint(b);")
    print("}")
    print("bool operator>=(\(type) a, \(type) b) {")
    print("    return uint(a) >= uint(b);")
    print("}")
}
print("uchar operator<<(uchar a, uint b) {")
print("    return uchar(uint(a) << (b & 255));")
print("}")
print("ushort operator<<(ushort a, uint b) {")
print("    return ushort(uint(a) << (b & 65535));")
print("}")
print("uchar operator>>(uchar a, uint b) {")
print("    return uchar(uint(a) >> (b & 255));")
print("}")
print("ushort operator>>(ushort a, uint b) {")
print("    return ushort(uint(a) >> (b & 65535));")
print("}")

for type in ["char", "short"] {
    print("\(type) operator+(\(type) a, \(type) b) {")
    print("    return \(type)(int(a) + int(b));")
    print("}")
    print("\(type) operator-(\(type) a, \(type) b) {")
    print("    return \(type)(int(a) - int(b));")
    print("}")
    print("\(type) operator*(\(type) a, \(type) b) {")
    print("    return \(type)(int(a) * int(b));")
    print("}")
    print("\(type) operator/(\(type) a, \(type) b) {")
    print("    return \(type)(int(a) / int(b));")
    print("}")
    print("\(type) operator&(\(type) a, \(type) b) {")
    print("    return \(type)(int(a) & int(b));")
    print("}")
    print("\(type) operator|(\(type) a, \(type) b) {")
    print("    return \(type)(int(a) | int(b));")
    print("}")
    print("\(type) operator^(\(type) a, \(type) b) {")
    print("    return \(type)(int(a) ^ int(b));")
    print("}")
    print("\(type) operator~(\(type) a) {")
    print("    return \(type)(~int(a));")
    print("}")
    print("bool operator==(\(type) a, \(type) b) {")
    print("    return int(a) == int(b);")
    print("}")
    print("bool operator>(\(type) a, \(type) b) {")
    print("    return int(a) > int(b);")
    print("}")
    print("bool operator>=(\(type) a, \(type) b) {")
    print("    return int(a) >= int(b);")
    print("}")
    print("bool operator<(\(type) a, \(type) b) {")
    print("    return int(a) < int(b);")
    print("}")
    print("bool operator<=(\(type) a, \(type) b) {")
    print("    return int(a) <= int(b);")
    print("}")
}
print("char operator<<(char a, uint b) {")
print("    return char(int(a) << (b & 255));")
print("}")
print("short operator<<(short a, uint b) {")
print("    return short(int(a) << (b & 65535));")
print("}")
print("char operator>>(char a, uint b) {")
print("    return char(int(a) >> (b & 255));")
print("}")
print("short operator>>(short a, uint b) {")
print("    return short(int(a) >> (b & 65535));")
print("}")

for type in ["uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
    print("\(type) operator++(\(type) value) {")
    print("    return value + 1;")
    print("}")
    print("\(type) operator--(\(type) value) {")
    print("    return value - 1;")
    print("}")
}

print("half operator+(half a, half b) {")
print("    return half(float(a) + float(b));")
print("}")
print("half operator-(half a, half b) {")
print("    return half(float(a) - float(b));")
print("}")
print("half operator*(half a, half b) {")
print("    return half(float(a) * float(b));")
print("}")
print("half operator/(half a, half b) {")
print("    return half(float(a) / float(b));")
print("}")
print("bool operator==(half a, half b) {")
print("    return float(a) == float(b);")
print("}")
print("bool operator<(half a, half b) {")
print("    return float(a) < float(b);")
print("}")
print("bool operator<=(half a, half b) {")
print("    return float(a) <= float(b);")
print("}")
print("bool operator>(half a, half b) {")
print("    return float(a) < float(b);")
print("}")
print("bool operator>=(half a, half b) {")
print("    return float(a) <= float(b);")
print("}")
print("char operator-(char x) {")
print("    return char(-int(x));")
print("}")
print("short operator-(short x) {")
print("    return short(-int(x));")
print("}")
print("half operator-(half x) {")
print("    return half(-float(x));")
print("}")
print("native int operator-(int);")
print("native float operator-(float);")
print()

for type in ["uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
    for size in 2 ... 4 {
        print("\(type)\(size) operator+(\(type)\(size) a, \(type)\(size) b) {")
        print("    \(type)\(size) result;")
        for m in 0 ..< size {
            print("    result[\(m)] = a[\(m)] + b[\(m)];")
        }
        print("    return result;")
        print("}")
        print("\(type)\(size) operator-(\(type)\(size) a, \(type)\(size) b) {")
        print("    \(type)\(size) result;")
        for m in 0 ..< size {
            print("    result[\(m)] = a[\(m)] - b[\(m)];")
        }
        print("    return result;")
        print("}")
        print("\(type)\(size) operator*(\(type)\(size) a, \(type)\(size) b) {")
        print("    \(type)\(size) result;")
        for m in 0 ..< size {
            print("    result[\(m)] = a[\(m)] * b[\(m)];")
        }
        print("    return result;")
        print("}")
        print("\(type)\(size) operator*(\(type)\(size) a, \(type) b) {")
        print("    \(type)\(size) result;")
        for m in 0 ..< size {
            print("    result[\(m)] = a[\(m)] * b;")
        }
        print("    return result;")
        print("}")
        print("\(type)\(size) operator*(\(type) a, \(type)\(size) b) {")
        print("    \(type)\(size) result;")
        for m in 0 ..< size {
            print("    result[\(m)] = a * b[\(m)];")
        }
        print("    return result;")
        print("}")
        print("\(type)\(size) operator/(\(type)\(size) a, \(type)\(size) b) {")
        print("    \(type)\(size) result;")
        for m in 0 ..< size {
            print("    result[\(m)] = a[\(m)] / b[\(m)];")
        }
        print("    return result;")
        print("}")
        print("\(type)\(size) operator/(\(type)\(size) a, \(type) b) {")
        print("    \(type)\(size) result;")
        for m in 0 ..< size {
            print("    result[\(m)] = a[\(m)] / b;")
        }
        print("    return result;")
        print("}")
        print("\(type)\(size) operator/(\(type) a, \(type)\(size) b) {")
        print("    \(type)\(size) result;")
        for m in 0 ..< size {
            print("    result[\(m)] = a / b[\(m)];")
        }
        print("    return result;")
        print("}")
    }
}
for type in ["char", "short", "int", "half", "float"] {
    for size in 2 ... 4 {
        print("\(type)\(size) operator-(\(type)\(size) a) {")
        print("    \(type)\(size) result;")
        for m in 0 ..< size {
            print("    result[\(m)] = -a[\(m)];")
        }
        print("    return result;")
        print("}")
    }
}
for type in ["half", "float"] {
    for i in 2 ... 4 {
        for j in 2 ... 4 {
            print("\(type)\(i)x\(j) operator+(\(type)\(i)x\(j) a, \(type)\(i)x\(j) b) {")
            print("    \(type)\(i)x\(j) result;")
            for m in 0 ..< i {
                for n in 0 ..< j {
                    print("    result[\(m)][\(n)] = a[\(m)][\(n)] + b[\(m)][\(n)];")
                }
            }
            print("    return result;")
            print("}")
            print("\(type)\(i)x\(j) operator-(\(type)\(i)x\(j) a, \(type)\(i)x\(j) b) {")
            print("    \(type)\(i)x\(j) result;")
            for m in 0 ..< i {
                for n in 0 ..< j {
                    print("    result[\(m)][\(n)] = a[\(m)][\(n)] - b[\(m)][\(n)];")
                }
            }
            print("    return result;")
            print("}")
            print("\(type)\(i)x\(j) operator-(\(type)\(i)x\(j) a) {")
            print("    \(type)\(i)x\(j) result;")
            for m in 0 ..< i {
                for n in 0 ..< j {
                    print("    result[\(m)][\(n)] = -a[\(m)][\(n)];")
                }
            }
            print("    return result;")
            print("}")
            print("\(type)\(i)x\(j) operator*(\(type)\(i)x\(j) a, \(type)\(i)x\(j) b) {")
            print("    \(type)\(i)x\(j) result;")
            for m in 0 ..< i {
                for n in 0 ..< j {
                    print("    result[\(m)][\(n)] = a[\(m)][\(n)] * b[\(m)][\(n)];")
                }
            }
            print("    return result;")
            print("}")
            print("\(type)\(i)x\(j) operator*(\(type)\(i)x\(j) a, \(type) b) {")
            print("    \(type)\(i)x\(j) result;")
            for m in 0 ..< i {
                for n in 0 ..< j {
                    print("    result[\(m)][\(n)] = a[\(m)][\(n)] * b;")
                }
            }
            print("    return result;")
            print("}")
            print("\(type)\(i)x\(j) operator*(\(type) a, \(type)\(i)x\(j) b) {")
            print("    \(type)\(i)x\(j) result;")
            for m in 0 ..< i {
                for n in 0 ..< j {
                    print("    result[\(m)][\(n)] = a * b[\(m)][\(n)];")
                }
            }
            print("    return result;")
            print("}")
            print("\(type)\(i)x\(j) operator/(\(type)\(i)x\(j) a, \(type)\(i)x\(j) b) {")
            print("    \(type)\(i)x\(j) result;")
            for m in 0 ..< i {
                for n in 0 ..< j {
                    print("    result[\(m)][\(n)] = a[\(m)][\(n)] / b[\(m)][\(n)];")
                }
            }
            print("    return result;")
            print("}")
            print("\(type)\(i)x\(j) operator/(\(type)\(i)x\(j) a, \(type) b) {")
            print("    \(type)\(i)x\(j) result;")
            for m in 0 ..< i {
                for n in 0 ..< j {
                    print("    result[\(m)][\(n)] = a[\(m)][\(n)] / b;")
                }
            }
            print("    return result;")
            print("}")
            print("\(type)\(i)x\(j) operator/(\(type) a, \(type)\(i)x\(j) b) {")
            print("    \(type)\(i)x\(j) result;")
            for m in 0 ..< i {
                for n in 0 ..< j {
                    print("    result[\(m)][\(n)] = a / b[\(m)][\(n)];")
                }
            }
            print("    return result;")
            print("}")
        }
    }
}

for type in ["bool", "uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
    print("operator \(type)2(\(type) x, \(type) y) {")
    print("    \(type)2 result;")
    print("    result.x = x;")
    print("    result.y = y;")
    print("    return result;")
    print("}")
    print("operator \(type)3(\(type) x, \(type) y, \(type) z) {")
    print("    \(type)3 result;")
    print("    result.x = x;")
    print("    result.y = y;")
    print("    result.z = z;")
    print("    return result;")
    print("}")
    print("operator \(type)3(\(type)2 x, \(type) y) {")
    print("    \(type)3 result;")
    print("    result.x = x.x;")
    print("    result.y = x.y;")
    print("    result.z = y;")
    print("    return result;")
    print("}")
    print("operator \(type)3(\(type) x, \(type)2 y) {")
    print("    \(type)3 result;")
    print("    result.x = x;")
    print("    result.y = y.x;")
    print("    result.z = y.y;")
    print("    return result;")
    print("}")
    print("operator \(type)4(\(type) x, \(type) y, \(type) z, \(type) w) {")
    print("    \(type)4 result;")
    print("    result.x = x;")
    print("    result.y = y;")
    print("    result.z = z;")
    print("    result.w = w;")
    print("    return result;")
    print("}")
    print("operator \(type)4(\(type)2 x, \(type) y, \(type) z) {")
    print("    \(type)4 result;")
    print("    result.x = x.x;")
    print("    result.y = x.y;")
    print("    result.z = y;")
    print("    result.w = z;")
    print("    return result;")
    print("}")
    print("operator \(type)4(\(type) x, \(type)2 y, \(type) z) {")
    print("    \(type)4 result;")
    print("    result.x = x;")
    print("    result.y = y.x;")
    print("    result.z = y.y;")
    print("    result.w = z;")
    print("    return result;")
    print("}")
    print("operator \(type)4(\(type) x, \(type) y, \(type)2 z) {")
    print("    \(type)4 result;")
    print("    result.x = x;")
    print("    result.y = y;")
    print("    result.z = z.x;")
    print("    result.w = z.y;")
    print("    return result;")
    print("}")
    print("operator \(type)4(\(type)2 x, \(type)2 y) {")
    print("    \(type)4 result;")
    print("    result.x = x.x;")
    print("    result.y = x.y;")
    print("    result.z = y.x;")
    print("    result.w = y.y;")
    print("    return result;")
    print("}")
    print("operator \(type)4(\(type)3 x, \(type) y) {")
    print("    \(type)4 result;")
    print("    result.x = x.x;")
    print("    result.y = x.y;")
    print("    result.z = x.z;")
    print("    result.w = y;")
    print("    return result;")
    print("}")
    print("operator \(type)4(\(type) x, \(type)3 y) {")
    print("    \(type)4 result;")
    print("    result.x = x;")
    print("    result.y = y.x;")
    print("    result.z = y.y;")
    print("    result.w = y.z;")
    print("    return result;")
    print("}")
    print("uint operator.length(\(type)2) {")
    print("    return 2;")
    print("}")
    print("uint operator.length(\(type)3) {")
    print("    return 3;")
    print("}")
    print("uint operator.length(\(type)4) {")
    print("    return 4;")
    print("}")
}

for type in ["bool", "uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
    print("bool operator==(\(type)2 a, \(type)2 b) {")
    print("    return a.x == b.x && a.y == b.y;")
    print("}")
    print("bool operator==(\(type)3 a, \(type)3 b) {")
    print("    return a.x == b.x && a.y == b.y && a.z == b.z;")
    print("}")
    print("bool operator==(\(type)4 a, \(type)4 b) {")
    print("    return a.x == b.x && a.y == b.y && a.z == b.z && a.w == b.w;")
    print("}")
    print("thread \(type)* operator&[](thread \(type)2* foo, uint index) {")
    print("    if (index == 0)")
    print("        return &foo->x;")
    print("    if (index == 1)")
    print("        return &foo->y;")
    print("    trap;")
    print("}")
    print("thread \(type)* operator&[](thread \(type)3* foo, uint index) {")
    print("    if (index == 0)")
    print("        return &foo->x;")
    print("    if (index == 1)")
    print("        return &foo->y;")
    print("    if (index == 2)")
    print("        return &foo->z;")
    print("    trap;")
    print("}")
    print("thread \(type)* operator&[](thread \(type)4* foo, uint index) {")
    print("    if (index == 0)")
    print("        return &foo->x;")
    print("    if (index == 1)")
    print("        return &foo->y;")
    print("    if (index == 2)")
    print("        return &foo->z;")
    print("    if (index == 3)")
    print("        return &foo->w;")
    print("    trap;")
    print("}")
}

for type in ["half", "float"] {
    for size in 2 ... 4 {
        print("thread \(type)\(size)* operator&[](thread \(type)2x\(size)* foo, uint index) {")
        print("    if (index == 0)")
        print("        return &foo->row0;")
        print("    if (index == 1)")
        print("        return &foo->row1;")
        print("    trap;")
        print("}")
        print("thread \(type)\(size)* operator&[](thread \(type)3x\(size)* foo, uint index) {")
        print("    if (index == 0)")
        print("        return &foo->row0;")
        print("    if (index == 1)")
        print("        return &foo->row1;")
        print("    if (index == 2)")
        print("        return &foo->row2;")
        print("    trap;")
        print("}")
        print("thread \(type)\(size)* operator&[](thread \(type)4x\(size)* foo, uint index) {")
        print("    if (index == 0)")
        print("        return &foo->row0;")
        print("    if (index == 1)")
        print("        return &foo->row1;")
        print("    if (index == 2)")
        print("        return &foo->row2;")
        print("    if (index == 3)")
        print("        return &foo->row3;")
        print("    trap;")
        print("}")
    }
}

for type in ["half", "float"] {
    for i in 2 ... 4 {
        for j in 2 ... 4 {
            print("bool operator==(\(type)\(i)x\(j) a, \(type)\(i)x\(j) b) {")
            print("    return")
            for m in 0 ..< i {
                for n in 0 ..< j {
                    print("        a[\(m)][\(n)] == b[\(m)][\(n)] &&")
                }
            }
            print("    true;")
            print("}")
        }
    }
}

func computeSwizzle(components: [Int], maxValue: Int, maxLength: Int) -> [[Int]] {
    if components.count == maxLength {
        return [components]
    } else {
        var result = [[Int]]()
        for i in 0 ..< maxValue {
            result += computeSwizzle(components: components + [i], maxValue: maxValue, maxLength: maxLength)
        }
        return result
    }
}

func component(value: Int) -> String {
    switch value {
        case 0:
            return "x"
        case 1:
            return "y"
        case 2:
            return "z"
        case 3:
            return "w"
        default:
            fatalError()
    }
}

func uniqueLength(swizzle: [Int]) -> Int {
    var has0 = false
    var has1 = false
    var has2 = false
    var has3 = false
    for v in swizzle {
        switch v {
            case 0:
                has0 = true
            case 1:
                has1 = true
            case 2:
                has2 = true
            case 3:
                has3 = true
            default:
                fatalError()
        }
    }
    var result = 0
    if has0 {
        result += 1
    }
    if has1 {
        result += 1
    }
    if has2 {
        result += 1
    }
    if has3 {
        result += 1
    }
    return result
}

for type in ["bool", "uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
    for size in 2 ... 4 {
        for maxValue in 2 ... 4 {
            for swizzle in computeSwizzle(components: [], maxValue: maxValue, maxLength: size) {
                let swizzleName = swizzle.map(component).joined()
                print("\(type)\(size) operator.\(swizzleName)(\(type)\(maxValue) v) {")
                print("    \(type)\(size) result;")
                for i in 0 ..< size {
                    print("    result.\(component(value: i)) = v.\(component(value: swizzle[i]));")
                }
                print("    return result;")
                print("}")
                if uniqueLength(swizzle: swizzle) == size {
                    print("\(type)\(maxValue) operator.\(swizzleName)=(\(type)\(maxValue) v, \(type)\(size) c) {")
                    print("    \(type)\(maxValue) result = v;")
                    for i in 0 ..< size {
                        print("    result.\(component(value: swizzle[i])) = c.\(component(value: i));")
                    }
                    print("    return result;")
                    print("}")
                }
            }
        }
    }
}
print()

// These functions are unary floating-point scalar functions,
// which can also be applied to vectors and matrices component-wise.
do {
    let nativeFunctions = ["cos", "sin", "tan", "acos", "asin", "atan", "cosh", "sinh", "tanh", "ceil", "exp", "floor", "log", "round", "trunc", "ddx", "ddy"]
    let nonNativeFunctions = ["sqrt", "log2", "log10", "frac", "exp2", "degrees", "radians", "rcp", "rsqrt", "saturate", "ddx_coarse", "ddx_fine", "ddy_coarse", "ddy_fine", "fwidth"]

    for function in nativeFunctions {
        print("native float \(function)(float);")
        print("half \(function)(half x) {")
        print("    return half(\(function)(float(x)));")
        print("}")
    }

    for type in ["half", "float"] {
        print("\(type) sqrt(\(type) x) {");
        print("    return pow(x, 0.5);")
        print("}")
        print("\(type) log2(\(type) x) {");
        print("    return log(x) / log(2);")
        print("}")
        print("\(type) log10(\(type) x) {");
        print("    return log(x) / log(10);")
        print("}")
        print("\(type) frac(\(type) x) {");
        print("    return x - floor(x);")
        print("}")
        print("\(type) exp2(\(type) x) {");
        print("    return exp(x * log(2));")
        print("}")
        print("\(type) degrees(\(type) x) {");
        print("    return x * 180 / 3.14159;")
        print("}")
        print("\(type) radians(\(type) x) {");
        print("    return x * 3.14159 / 180;")
        print("}")
        print("\(type) rcp(\(type) x) {");
        print("    return 1 / x;")
        print("}")
        print("\(type) rsqrt(\(type) x) {");
        print("    return 1 / sqrt(x);")
        print("}")
        print("\(type) saturate(\(type) x) {");
        print("    return clamp(x, 0, 1);")
        print("}")
        print("\(type) ddx_coarse(\(type) x) {");
        print("    return ddx(x);")
        print("}")
        print("\(type) ddx_fine(\(type) x) {");
        print("    return ddx(x);")
        print("}")
        print("\(type) ddy_coarse(\(type) x) {");
        print("    return ddy(x);")
        print("}")
        print("\(type) ddy_fine(\(type) x) {");
        print("    return ddy(x);")
        print("}")
        print("\(type) fwidth(\(type) x) {");
        print("    return abs(ddx(x)) + abs(ddy(x));")
        print("}")

        for function in nativeFunctions + nonNativeFunctions {
            for size in 2 ... 4 {
                print("\(type)\(size) \(function)(\(type)\(size) x) {");
                print("    \(type)\(size) result;")
                for i in 0 ..< size {
                    print("    result[\(i)] = \(function)(x[\(i)]);")
                }
                print("    return result;")
                print("}")
            }
            for i in 2 ... 4 {
                for j in 2 ... 4 {
                    print("\(type)\(i)x\(j) \(function)(\(type)\(i)x\(j) x) {");
                    print("    \(type)\(i)x\(j) result;")
                    for m in 0 ..< i {
                        for n in 0 ..< j {
                            print("    result[\(m)][\(n)] = \(function)(x[\(m)][\(n)]);")
                        }
                    }
                    print("    return result;")
                    print("}")
                }
            }
        }
        print()
    }
}

// These functions are binary floating-point scalar functions,
// which can also be applied to vectors and matrices component-wise.
do {
    let nativeFunctions = ["pow"]

    for function in nativeFunctions {
        print("native float \(function)(float, float);")
        print("half \(function)(half x, half y) {")
        print("    return half(\(function)(float(x), float(y)));")
        print("}")
    }

    for type in ["half", "float"] {
        let nonNativeFunctions = ["step", "ldexp", "fmod"]

        print("\(type) step(\(type) y, \(type) x) {");
        print("    return x >= y ? 1 : 0;")
        print("}")
        print("\(type) ldexp(\(type) x, \(type) e) {");
        print("    return x * pow(2, e);")
        print("}")
        print("\(type) fmod(\(type) x, \(type) y) {");
        print("    uint whole = uint(x / y);")
        print("    \(type) multiple = \(type)(whole) * y;")
        print("    return x - multiple;")
        print("}")

        for function in nativeFunctions + nonNativeFunctions {
            for size in 2 ... 4 {
                print("\(type)\(size) \(function)(\(type)\(size) x, \(type)\(size) y) {");
                print("    \(type)\(size) result;")
                for i in 0 ..< size {
                    print("    result[\(i)] = \(function)(x[\(i)], y[\(i)]);")
                }
                print("    return result;")
                print("}")
            }
            for i in 2 ... 4 {
                for j in 2 ... 4 {
                    print("\(type)\(i)x\(j) \(function)(\(type)\(i)x\(j) x, \(type)\(i)x\(j) y) {");
                    print("    \(type)\(i)x\(j) result;")
                    for m in 0 ..< i {
                        for n in 0 ..< j {
                            print("    result[\(m)][\(n)] = \(function)(x[\(m)][\(n)], y[\(m)][\(n)]);")
                        }
                    }
                    print("    return result;")
                    print("}")
                }
            }
        }
        print()
    }
}

// These functions are ternary floating-point scalar functions,
// which can also be applied to vectors and matrices component-wise.
for type in ["half", "float"] {
    let nonNativeFunctions = ["smoothstep", "lerp", "fma", "mad"]

    print("\(type) smoothstep(\(type) edge0, \(type) edge1, \(type) x) {");
    print("    \(type) t = clamp((x - edge0) / (edge1 - edge0), 0, 1);")
    print("    return t * t * (3 - 2 * t);")
    print("}")
    print("\(type) lerp(\(type) x, \(type) y, \(type) s) {");
    print("    return x * (1 - s) + y * s;")
    print("}")
    print("\(type) fma(\(type) x, \(type) y, \(type) z) {");
    print("    return x * y + z;")
    print("}")
    print("\(type) mad(\(type) x, \(type) y, \(type) z) {");
    print("    return x * y + z;")
    print("}")

    for function in nonNativeFunctions {
        for size in 2 ... 4 {
            print("\(type)\(size) \(function)(\(type)\(size) x, \(type)\(size) y, \(type)\(size) z) {");
            print("    \(type)\(size) result;")
            for i in 0 ..< size {
                print("    result[\(i)] = \(function)(x[\(i)], y[\(i)], z[\(i)]);")
            }
            print("    return result;")
            print("}")
        }
        for i in 2 ... 4 {
            for j in 2 ... 4 {
                print("\(type)\(i)x\(j) \(function)(\(type)\(i)x\(j) x, \(type)\(i)x\(j) y, \(type)\(i)x\(j) z) {");
                print("    \(type)\(i)x\(j) result;")
                for m in 0 ..< i {
                    for n in 0 ..< j {
                        print("    result[\(m)][\(n)] = \(function)(x[\(m)][\(n)], y[\(m)][\(n)], z[\(m)][\(n)]);")
                    }
                }
                print("    return result;")
                print("}")
            }
        }
    }
    print()
}

print("native bool isnormal(half);")
print("native bool isnormal(float);")
for type in ["half", "float"] {
    for size in 2 ... 4 {
        print("bool\(size) isnormal(\(type)\(size) x) {");
        print("    bool\(size) result;")
        for i in 0 ..< size {
            print("    result[\(i)] = isnormal(x[\(i)]);")
        }
        print("    return result;")
        print("}")
    }
    print()
}

do {
    let nativeFunctions = ["isfinite", "isinf", "isnan"]

    for function in nativeFunctions {
        print("native bool \(function)(float);")
        print("bool \(function)(half x) {")
        print("    return \(function)(float(x));")
        print("}")
    }

    for type in ["half", "float"] {
        for function in nativeFunctions {
            for size in 2 ... 4 {
                print("bool\(size) \(function)(\(type)\(size) x) {");
                print("    bool\(size) result;")
                for i in 0 ..< size {
                    print("    result[\(i)] = \(function)(x[\(i)]);")
                }
                print("    return result;")
                print("}")
            }
        }
        print()
    }
}

for type in ["half", "float"] {
    let nonNativeFunctions = ["isordered", "isunordered"]

    print("bool isordered(\(type) x, \(type) y) {")
    print("    return (x == x) && (y == y);")
    print("}")
    print("bool isunordered(\(type) x, \(type) y) {")
    print("    return isnan(x) || isnan(y);")
    print("}")

    for function in nonNativeFunctions {
        for size in 2 ... 4 {
            print("bool\(size) \(function)(\(type)\(size) x, \(type)\(size) y) {");
            print("    bool\(size) result;")
            for i in 0 ..< size {
                print("    result[\(i)] = \(function)(x[\(i)], y[\(i)]);")
            }
            print("    return result;")
            print("}")
        }
    }
    print()
}

print("native float atan2(float, float);")
print("half atan2(half x, half y) {")
print("    return half(atan2(float(x), float(y)));")
print("}")
for type in ["half", "float"] {
    for size in 2 ... 4 {
        print("\(type)\(size) atan2(\(type)\(size) x, \(type)\(size) y) {");
        print("    \(type)\(size) result;")
        for i in 0 ..< size {
            print("    result[\(i)] = atan2(x[\(i)], y[\(i)]);")
        }
        print("    return result;")
        print("}")
    }
    for i in 2 ... 4 {
        for j in 2 ... 4 {
            print("\(type)\(i)x\(j) atan2(\(type)\(i)x\(j) x, \(type)\(i)x\(j) y) {");
            print("    \(type)\(i)x\(j) result;")
            for m in 0 ..< i {
                for n in 0 ..< j {
                    print("    result[\(m)][\(n)] = atan2(x[\(m)][\(n)], y[\(m)][\(n)]);")
                }
            }
            print("    return result;")
            print("}")
        }
    }
}
print()

for type in ["half", "float"] {
    print("void sincos(\(type) x, thread \(type)* y, thread \(type)* z) {")
    print("    *y = sin(x);")
    print("    *z = cos(x);")
    print("}")
    for size in 2 ... 4 {
        print("void sincos(\(type)\(size) x, thread \(type)\(size)* y, thread \(type)\(size)* z) {");
        for i in 0 ..< size {
            print("    sincos(x[\(i)], &((*y)[\(i)]), &((*z)[\(i)]));")
        }
        print("}")
    }
    for i in 2 ... 4 {
        for j in 2 ... 4 {
            print("void sincos(\(type)\(i)x\(j) x, thread \(type)\(i)x\(j)* y, thread \(type)\(i)x\(j)* z) {");
            for m in 0 ..< i {
                for n in 0 ..< j {
                    print("    sincos(x[\(m)][\(n)], &((*y)[\(m)][\(n)]), &((*z)[\(m)][\(n)]));")
                }
            }
            print("}")
        }
    }
}
print()

for function in [("all", "true", "&&"), ("any", "false", "||")] {
    print("bool \(function.0)(bool x) {");
    print("    return x;")
    print("}")
    for size in 2 ... 4 {
        print("bool \(function.0)(bool\(size) x) {")
        print("    bool result = \(function.1);")
        for i in 0 ..< size {
            print("    result = result \(function.2) (x[\(i)]);")
        }
        print("    return result;")
        print("}")
    }
    for type in ["uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
        print("bool \(function.0)(\(type) x) {");
        print("    return x != 0;")
        print("}")
        for size in 2 ... 4 {
            print("bool \(function.0)(\(type)\(size) x) {")
            print("    bool result = \(function.1);")
            for i in 0 ..< size {
                print("    result = result \(function.2) (x[\(i)] != 0);")
            }
            print("    return result;")
            print("}")
        }
        if type == "half" || type == "float" {
            for i in 2 ... 4 {
                for j in 2 ... 4 {
                    print("bool \(function.0)(\(type)\(i)x\(j) x) {");
                    print("    bool result = \(function.1);")
                    for m in 0 ..< i {
                        for n in 0 ..< j {
                            print("    result = result \(function.2) (x[\(m)][\(n)] != 0);")
                        }
                    }
                    print("    return result;")
                    print("}")
                }
            }
        }
    }
    print()
}

for type in ["uchar", "ushort", "uint"] {
    print("\(type) abs(\(type) x) {");
    print("    return x;")
    print("}")
}
for type in ["char", "short", "int", "half", "float"] {
    print("\(type) abs(\(type) x) {");
    print("    if (x < 0)")
    print("        return -x;")
    print("    return x;")
    print("}")
}
for type in ["uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
    for size in 2 ... 4 {
        print("\(type)\(size) abs(\(type)\(size) x) {")
        print("    \(type)\(size) result;")
        for i in 0 ..< size {
            print("    result[\(i)] = abs(x[\(i)]);")
        }
        print("    return result;")
        print("}")
    }
    if type == "half" || type == "float" {
        for i in 2 ... 4 {
            for j in 2 ... 4 {
                print("\(type)\(i)x\(j) abs(\(type)\(i)x\(j) x) {");
                print("    \(type)\(i)x\(j) result;")
                for m in 0 ..< i {
                    for n in 0 ..< j {
                        print("    result[\(m)][\(n)] = abs(x[\(m)][\(n)]);")
                    }
                }
                print("    return result;")
                print("}")
            }
        }
    }
}
print()

for type in ["uchar", "ushort", "uint"] {
    print("\(type) sign(\(type) x) {");
    print("    return x == 0 ? 0 : 1;")
    print("}")
}
for type in ["char", "short", "int", "half", "float"] {
    print("\(type) sign(\(type) x) {");
    print("    if (x < 0)")
    print("        return -1;")
    print("    if (x == 0)")
    print("        return 0;")
    print("    return 1;")
    print("}")
}
for type in ["uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
    for size in 2 ... 4 {
        print("\(type)\(size) sign(\(type)\(size) x) {")
        print("    \(type)\(size) result;")
        for i in 0 ..< size {
            print("    result[\(i)] = sign(x[\(i)]);")
        }
        print("    return result;")
        print("}")
    }
    if type == "half" || type == "float" {
        for i in 2 ... 4 {
            for j in 2 ... 4 {
                print("\(type)\(i)x\(j) sign(\(type)\(i)x\(j) x) {");
                print("    \(type)\(i)x\(j) result;")
                for m in 0 ..< i {
                    for n in 0 ..< j {
                        print("    result[\(m)][\(n)] = sign(x[\(m)][\(n)]);")
                    }
                }
                print("    return result;")
                print("}")
            }
        }
    }
}
print()

for type in ["uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
    let nonNativeFunctions = ["min", "max"]

    print("\(type) min(\(type) x, \(type) y) {");
    print("    return x > y ? y : x;")
    print("}")
    print("\(type) max(\(type) x, \(type) y) {");
    print("    return x > y ? x : y;")
    print("}")

    for function in nonNativeFunctions {
        for size in 2 ... 4 {
            print("\(type)\(size) \(function)(\(type)\(size) x, \(type)\(size) y) {");
            print("    \(type)\(size) result;")
            for i in 0 ..< size {
                print("    result[\(i)] = \(function)(x[\(i)], y[\(i)]);")
            }
            print("    return result;")
            print("}")
        }
        if type == "half" || type == "float" {
            for i in 2 ... 4 {
                for j in 2 ... 4 {
                    print("\(type)\(i)x\(j) \(function)(\(type)\(i)x\(j) x, \(type)\(i)x\(j) y) {");
                    print("    \(type)\(i)x\(j) result;")
                    for m in 0 ..< i {
                        for n in 0 ..< j {
                            print("    result[\(m)][\(n)] = \(function)(x[\(m)][\(n)], y[\(m)][\(n)]);")
                        }
                    }
                    print("    return result;")
                    print("}")
                }
            }
        }
    }
    print()
}

for type in ["uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
    let nonNativeFunctions = ["clamp"]

    print("\(type) clamp(\(type) x, \(type) lower, \(type) upper) {");
    print("    return max(min(upper, x), lower);")
    print("}")

    for function in nonNativeFunctions {
        for size in 2 ... 4 {
            print("\(type)\(size) \(function)(\(type)\(size) x, \(type)\(size) y, \(type)\(size) z) {");
            print("    \(type)\(size) result;")
            for i in 0 ..< size {
                print("    result[\(i)] = \(function)(x[\(i)], y[\(i)], z[\(i)]);")
            }
            print("    return result;")
            print("}")
        }
        if type == "half" || type == "float" {
            for i in 2 ... 4 {
                for j in 2 ... 4 {
                    print("\(type)\(i)x\(j) \(function)(\(type)\(i)x\(j) x, \(type)\(i)x\(j) y, \(type)\(i)x\(j) z) {");
                    print("    \(type)\(i)x\(j) result;")
                    for m in 0 ..< i {
                        for n in 0 ..< j {
                            print("    result[\(m)][\(n)] = \(function)(x[\(m)][\(n)], y[\(m)][\(n)], z[\(m)][\(n)]);")
                        }
                    }
                    print("    return result;")
                    print("}")
                }
            }
        }
    }
    print()
}

for type in ["half", "float"] {
    print("\(type) modf(\(type) x, thread \(type)* ip) {")
    print("    uint result = uint(x);")
    print("    *ip = x - \(type)(result);")
    print("    return \(type)(result);")
    print("}")

    for size in 2 ... 4 {
        print("\(type)\(size) modf(\(type)\(size) x, thread \(type)\(size)* y) {");
        print("    \(type)\(size) result;")
        for i in 0 ..< size {
            print("    result[\(i)] = modf(x[\(i)], &((*y)[\(i)]));")
        }
        print("    return result;")
        print("}")
    }
    for i in 2 ... 4 {
        for j in 2 ... 4 {
            print("\(type)\(i)x\(j) modf(\(type)\(i)x\(j) x, thread \(type)\(i)x\(j)* y) {");
            print("    \(type)\(i)x\(j) result;")
            for m in 0 ..< i {
                for n in 0 ..< j {
                    print("    result[\(m)][\(n)] = modf(x[\(m)][\(n)], &((*y)[\(m)][\(n)]));")
                }
            }
            print("    return result;")
            print("}")
        }
    }
    print()
}

print("uchar count_bits(uchar x) {")
print("    return uchar(((x | uchar(1 << 0)) == 0 ? 0 : 1) +")
for i in 1 ..< 7 {
    print("           ((x | uchar(1 << \(i))) == 0 ? 0 : 1) +")
}
print("           ((x | uchar(1 << 7)) == 0 ? 0 : 1));")
print("}")
print("uchar count_bits(ushort x) {")
print("    return uchar(((x | ushort(1 << 0)) == 0 ? 0 : 1) +")
for i in 1 ..< 15 {
    print("           ((x | ushort(1 << \(i))) == 0 ? 0 : 1) +")
}
print("           ((x | ushort(1 << 15)) == 0 ? 0 : 1));")
print("}")
print("uchar count_bits(uint x) {")
print("    return uchar(((x | uint(1 << 0)) == 0 ? 0 : 1) +")
for i in 1 ..< 31 {
    print("           ((x | uint(1 << \(i))) == 0 ? 0 : 1) +")
}
print("           ((x | uint(1 << 31)) == 0 ? 0 : 1));")
print("}")
print("uchar reversebits(uchar x) {")
print("    return uchar(((x & uchar(1 << 0)) << 7) | ")
for i in 1 ..< 7 {
    let offset = 7 - 2 * i
    print("           ((x & uchar(1 << \(i))) \(offset > 0 ? "<<" : ">>") \(abs(offset))) |")
}
print("           ((x & uchar(1 << 7)) >> 7));")
print("}")
print("ushort reversebits(ushort x) {")
print("    return ushort(((x & ushort(1 << 0)) << 15) | ")
for i in 1 ..< 15 {
    let offset = 15 - 2 * i
    print("           ((x & ushort(1 << \(i))) \(offset > 0 ? "<<" : ">>") \(abs(offset))) |")
}
print("           ((x & ushort(1 << 15)) >> 15));")
print("}")
print("uint reversebits(uint x) {")
print("    return uint(((x & uint(1 << 0)) << 31) | ")
for i in 1 ..< 31 {
    let offset = 31 - 2 * i
    print("           ((x & uint(1 << \(i))) \(offset > 0 ? "<<" : ">>") \(abs(offset))) |")
}
print("           ((x & uint(1 << 31)) >> 31));")
print("}")
for type in ["uchar", "ushort", "uint"] {
    for size in 2 ... 4 {
        print("uchar\(size) count_bits(\(type)\(size) x) {");
        print("    uchar\(size) result;")
        for i in 0 ..< size {
            print("    result[\(i)] = count_bits(x[\(i)]);")
        }
        print("    return result;")
        print("}")
    }
}
for type in ["uchar", "ushort", "uint"] {
    for size in 2 ... 4 {
        print("\(type)\(size) reversebits(\(type)\(size) x) {");
        print("    \(type)\(size) result;")
        for i in 0 ..< size {
            print("    result[\(i)] = reversebits(x[\(i)]);")
        }
        print("    return result;")
        print("}")
    }
}
print()

print("uint firstbithigh(uchar x) {")
for i in 0 ... 7 {
    print("    if ((x & uchar(1 << \(7 - i))) != 0)")
    print("        return \(i);")
}
print("    return 8;")
print("}")
print("uint firstbithigh(ushort x) {")
for i in 0 ... 15 {
    print("    if ((x & ushort(1 << \(15 - i))) != 0)")
    print("        return \(i);")
}
    print("    return 16;")
print("}")
print("uint firstbithigh(uint x) {")
for i in 0 ... 31 {
    print("    if ((x & uint(1 << \(31 - i))) != 0)")
    print("        return \(i);")
}
print("    return 32;")
print("}")
print("uint firstbithigh(char x) {")
print("    return firstbithigh(uchar(x));")
print("}")
print("uint firstbithigh(short x) {")
print("    return firstbithigh(ushort(x));")
print("}")
print("uint firstbithigh(int x) {")
print("    return firstbithigh(uint(x));")
print("}")
print("uint firstbitlow(uchar x) {")
for i in 0 ... 7 {
    print("    if ((x & uchar(1 << \(i))) != 0)")
    print("        return \(7 - i);")
}
print("    return 8;")
print("}")
print("uint firstbitlow(ushort x) {")
for i in 0 ... 15 {
    print("    if ((x & ushort(1 << \(i))) != 0)")
    print("        return \(15 - i);")
}
print("    return 16;")
print("}")
print("uint firstbitlow(uint x) {")
for i in 0 ... 31 {
    print("    if ((x & uint(1 << \(i))) != 0)")
    print("        return \(31 - i);")
}
print("    return 32;")
print("}")
print("uint firstbitlow(char x) {")
print("    return firstbitlow(uchar(x));")
print("}")
print("uint firstbitlow(short x) {")
print("    return firstbitlow(ushort(x));")
print("}")
print("uint firstbitlow(int x) {")
print("    return firstbitlow(uint(x));")
print("}")
for function in ["firstbithigh", "firstbitlow"] {
    for type in ["uchar", "ushort", "uint", "char", "short", "int"] {
        for size in 2 ... 4 {
            print("uint\(size) \(function)(\(type)\(size) x) {");
            print("    uint\(size) result;")
            for i in 0 ..< size {
                print("    result[\(i)] = \(function)(x[\(i)]);")
            }
            print("    return result;")
            print("}")
        }
    }
}
print()

// Row-major, so the first index selects which row, and the second index selects which column
for type in ["half", "float"] {
    print("\(type) determinant(\(type) x) {")
    print("    return x;")
    print("}")
    print("\(type) determinant(\(type)2x2 x) {")
    print("    return x[0][0] * x[1][1] - x[0][1] * x[1][0];")
    print("}")
    print("\(type) determinant(\(type)3x3 x) {")
    print("    return x[0][0] * x[1][1] * x[2][2] +")
    print("           x[0][1] * x[1][2] * x[2][0] +")
    print("           x[0][2] * x[1][0] * x[2][1] -")
    print("           x[2][0] * x[1][1] * x[0][2] -")
    print("           x[2][1] * x[1][2] * x[0][0] -")
    print("           x[2][2] * x[1][0] * x[0][1];")
    print("}")
    print("\(type) determinant(\(type)4x4 x) {")
    print("    \(type) result;")
    print("    \(type)3x3 minor;")
    print("    minor[0][0] = x[1][1];")
    print("    minor[0][1] = x[1][2];")
    print("    minor[0][2] = x[1][3];")
    print("    minor[1][0] = x[2][1];")
    print("    minor[1][1] = x[2][2];")
    print("    minor[1][2] = x[2][3];")
    print("    minor[2][0] = x[3][1];")
    print("    minor[2][1] = x[3][2];")
    print("    minor[2][2] = x[3][3];")
    print("    result = result + x[0][0] * determinant(minor);")
    print("    minor[0][0] = x[1][0];")
    print("    minor[0][1] = x[1][2];")
    print("    minor[0][2] = x[1][3];")
    print("    minor[1][0] = x[2][0];")
    print("    minor[1][1] = x[2][2];")
    print("    minor[1][2] = x[2][3];")
    print("    minor[2][0] = x[3][0];")
    print("    minor[2][1] = x[3][2];")
    print("    minor[2][2] = x[3][3];")
    print("    result = result - x[0][1] * determinant(minor);")
    print("    minor[0][0] = x[1][0];")
    print("    minor[0][1] = x[1][1];")
    print("    minor[0][2] = x[1][3];")
    print("    minor[1][0] = x[2][0];")
    print("    minor[1][1] = x[2][1];")
    print("    minor[1][2] = x[2][3];")
    print("    minor[2][0] = x[3][0];")
    print("    minor[2][1] = x[3][1];")
    print("    minor[2][2] = x[3][3];")
    print("    result = result + x[0][2] * determinant(minor);")
    print("    minor[0][0] = x[1][0];")
    print("    minor[0][1] = x[1][1];")
    print("    minor[0][2] = x[1][2];")
    print("    minor[1][0] = x[2][0];")
    print("    minor[1][1] = x[2][1];")
    print("    minor[1][2] = x[2][2];")
    print("    minor[2][0] = x[3][0];")
    print("    minor[2][1] = x[3][1];")
    print("    minor[2][2] = x[3][2];")
    print("    result = result - x[0][3] * determinant(minor);")
    print("    return result;")
    print("}")
}
print()

for type in ["uchar4", "ushort4", "uint4", "char4", "short4", "int4", "half4", "float4"] {
    print("\(type) dst(\(type) src0, \(type) src1) {")
    print("    \(type) result;")
    print("    result.x = 1;")
    print("    result.y = src0.y * src1.y;")
    print("    result.z = src0.z;")
    print("    result.w = src1.w;")
    print("    return result;")
    print("}")
}
print()

for type in ["half", "float"] {
    print("\(type) distance(\(type) x, \(type) y) {")
    print("    return length(x - y);")
    print("}")
    for size in 2 ... 4 {
        print("\(type) distance(\(type)\(size) x, \(type)\(size) y) {")
        print("    return length(x - y);")
        print("}")
    }
}
print()

for type in ["half3", "float3"] {
    print("\(type) cross(\(type) u, \(type) v) {")
    print("    \(type) result;")
    print("    result.x = u.y * v.z - u.z * v.y;")
    print("    result.y = u.z * v.x - u.x * v.z;")
    print("    result.z = u.x * v.y - u.y * v.x;")
    print("    return result;")
    print("}")
}
print()

for type in ["uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
    print("\(type) dot(\(type) a, \(type) b) {")
    print("    return a * b;")
    print("}")
    for size in 2 ... 4 {
        print("\(type) dot(\(type)\(size) a, \(type)\(size) b) {")
        print("    \(type) result = 0;")
        for i in 0 ..< size {
            print("    result = result + a[\(i)] * b[\(i)];")
        }
        print("    return result;")
        print("}")
    }
}
print()

for type in ["half", "float"] {
    for size in ["", "2", "3", "4"] {
        print("\(type)\(size) faceforward(\(type)\(size) n, \(type)\(size) i, \(type)\(size) ng) {")
        print("    return -n * sign(dot(i, ng));")
        print("}")
    }
}
print()

for type in ["half", "float"] {
    for size in ["", "2", "3", "4"] {
        print("\(type) length(\(type)\(size) x) {")
        print("    return sqrt(dot(x, x));")
        print("}")
    }
}
print()

for type in ["half", "float"] {
    print("\(type)4 lit(\(type) n_dot_l, \(type) n_dot_h, \(type) m) {")
    print("    \(type) ambient = 1;")
    print("    \(type) diffuse = max(0, n_dot_l);")
    print("    \(type) specular = n_dot_l < 0 || n_dot_h < 0 ? 0 : n_dot_h * m;")
    print("    \(type)4 result;")
    print("    result.x = ambient;")
    print("    result.y = diffuse;")
    print("    result.z = specular;")
    print("    result.w = 1;")
    print("    return result;")
    print("}")
}
print()

for type in ["half", "float"] {
    for size in ["", "2", "3", "4"] {
        print("\(type)\(size) normalize(\(type)\(size) x) {")
        print("    return x / length(x);")
        print("}")
    }
}
print()

for type in ["half", "float"] {
    for size in ["", "2", "3", "4"] {
        print("\(type)\(size) reflect(\(type)\(size) i, \(type)\(size) n) {")
        print("    return i - 2 * n * dot(i, n);")
        print("}")
    }
}
print()

// OpenGL ES v3.30 section 8.4
for type in ["half", "float"] {
    for size in ["", "2", "3", "4"] {
        print("\(type)\(size) refract(\(type)\(size) i, \(type)\(size) n, \(type) eta) {")
        print("    \(type)\(size) result;")
        print("    \(type) k = 1 - eta * eta * (1 - dot(n, i) * dot(n, i));")
        print("    if (k < 0)")
        print("        return result;")
        print("    return eta * i - (eta * dot(n, i) + sqrt(k)) * n;")
        print("}")
    }
}
print()

for type in ["half", "float"] {
    print("\(type) transpose(\(type) x) {")
    print("    return x;")
    print("}")
    for i in 2 ... 4 {
        for j in 2 ... 4 {
            print("\(type)\(i)x\(j) transpose(\(type)\(j)x\(i) x) {")
            print("    \(type)\(i)x\(j) result;")
            for m in 0 ..< i {
                for n in 0 ..< j {
                    print("    result[\(m)][\(n)] = x[\(n)][\(m)];")
                }
            }
            print("    return result;")
            print("}")
        }
    }
}
print()

for resultType in ["int", "uint", "float"] {
    for type in ["int", "uint", "float"] {
        if type == resultType {
            print("\(resultType) as\(resultType)(\(type) x) {")
            print("    return x;")
            print("}")
        } else if resultType == "int" && type == "uint" || resultType == "uint" && type == "int" {
            print("\(resultType) as\(resultType)(\(type) x) {")
            print("    return \(resultType)(x);")
            print("}")
        } else {
            print("native \(resultType) as\(resultType)(\(type));")
        }
        for size in 2 ... 4 {
            if type == resultType {
                print("\(resultType)\(size) as\(resultType)(\(type)\(size) x) {")
                print("    return x;")
                print("}")
            } else {
                print("\(resultType)\(size) as\(resultType)(\(type)\(size) x) {")
                print("    \(resultType)\(size) result;")
                for i in 0 ..< size {
                    print("    result[\(i)] = as\(resultType)(x[\(i)]);")
                }
                print("    return result;")
                print("}")
            }
        }
        if resultType == "float" && type == "float" {
            for i in 2 ... 4 {
                for j in 2 ... 4 {
                    if type == resultType {
                        print("\(resultType)\(i)x\(j) as\(resultType)(\(type)\(i)x\(j) x) {")
                        print("    return x;")
                        print("}")
                    } else {
                        print("\(resultType)\(i)x\(j) as\(resultType)(\(type)\(i)x\(j) x) {");
                        print("    \(resultType)\(i)x\(j) result;")
                        for m in 0 ..< i {
                            for n in 0 ..< j {
                                print("    result[\(m)][\(n)] = as\(resultType)(x[\(m)][\(n)]);")
                            }
                        }
                        print("    return result;")
                        print("}")
                    }
                }
            }
        }
    }
}
print()

print("native float f16tof32(uint);")
print("native uint f32tof16(float);")
for size in 2 ... 4 {
    print("float\(size) f16tof32(uint\(size) x) {")
    print("    float\(size) result;")
    for i in 0 ..< size {
        print("    result[\(i)] = f16tof32(x[\(i)]);")
    }
    print("    return result;")
    print("}")
    print("uint\(size) f32tof16(float\(size) x) {")
    print("    uint\(size) result;")
    for i in 0 ..< size {
        print("    result[\(i)] = f32tof16(x[\(i)]);")
    }
    print("    return result;")
    print("}")
}
print()

print("native void AllMemoryBarrierWithGroupSync();")
print("native void DeviceMemoryBarrierWithGroupSync();")
print("native void GroupMemoryBarrierWithGroupSync();")
print()

for type in ["uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
    print("\(type) mul(\(type) x, \(type) y) {")
    print("    return x * y;")
    print("}")
}

for type in ["uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
    for size in 2 ... 4 {
        print("\(type)\(size) mul(\(type) x, \(type)\(size) y) {")
        print("    \(type)\(size) result;")
        for i in 0 ..< size {
            print("    result[\(i)] = x * y[\(i)];")
        }
        print("    return result;")
        print("}")
        print("\(type)\(size) mul(\(type)\(size) x, \(type) y) {")
        print("    \(type)\(size) result;")
        for i in 0 ..< size {
            print("    result[\(i)] = x[\(i)] * y;")
        }
        print("    return result;")
        print("}")
    }
}

for type in ["half", "float"] {
    for i in 2 ... 4 {
        for j in 2 ... 4 {
            print("\(type)\(i)x\(j) mul(\(type) x, \(type)\(i)x\(j) y) {")
            print("    \(type)\(i)x\(j) result;")
            for m in 0 ..< i {
                for n in 0 ..< j {
                    print("    result[\(m)][\(n)] = x * y[\(m)][\(n)];")
                }
            }
            print("    return result;")
            print("}")
            print("\(type)\(i)x\(j) mul(\(type)\(i)x\(j) x, \(type) y) {")
            print("    \(type)\(i)x\(j) result;")
            for m in 0 ..< i {
                for n in 0 ..< j {
                    print("    result[\(m)][\(n)] = x[\(m)][\(n)] * y;")
                }
            }
            print("    return result;")
            print("}")
        }
    }
}

for type in ["uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
    for size in 2 ... 4 {
        print("\(type)\(size) mul(\(type)\(size) x, \(type)\(size) y) {")
        print("    return dot(x, y);")
        print("}")
    }
}

for type in ["half", "float"] {
    for i in 2 ... 4 {
        for j in 2 ... 4 {
            print("\(type)\(j) mul(\(type)\(i) x, \(type)\(i)x\(j) y) {")
            print("    \(type)\(j) result;")
            for m in 0 ..< j {
                print("    result[\(m)] = 0;")
                for n in 0 ..< i {
                    print("    result[\(m)] += x[\(n)] * y[\(n)][\(m)];")
                }
            }
            print("    return result;")
            print("}")
            print("\(type)\(i) mul(\(type)\(i)x\(j) x, \(type)\(j) y) {")
            print("    \(type)\(i) result;")
            for m in 0 ..< i {
                print("    result[\(m)] = 0;")
                for n in 0 ..< j {
                    print("    result[\(m)] += x[\(m)][\(n)] * y[\(n)];")
                }
            }
            print("    return result;")
            print("}")
        }
    }
}

for type in ["half", "float"] {
    for i in 2 ... 4 {
        for j in 2 ... 4 {
            for k in 2 ... 4 {
                print("\(type)\(i)x\(k) mul(\(type)\(i)x\(j) x, \(type)\(j)x\(k) y) {")
                print("    \(type)\(i)x\(k) result;")
                for p in 0 ..< i {
                    for r in 0 ..< k {
                        print("    result[\(p)][\(k)] = 0;")
                        for q in 0 ..< j {
                            print("    result[\(p)][\(k)] += x[\(p)][\(q)] * y[\(q)][\(r)];")
                        }
                    }
                }
                print("    return result;")
                print("}")
            }
        }
    }
}
print()
/*
for type in ["uint", "int"] {
    for function in ["Add", "And", "Exchange", "Max", "Min", "Or", "Xor"] {
        print("native void Interlocked\(function)(thread atomic_\(type)*, \(type), thread \(type)*);")
    }
    print("native void InterlockedCompareExchange(thread atomic_\(type)*, \(type), \(type), thread \(type)*);")
}
print()

for type in ["uchar", "ushort", "uint", "char", "short", "int", "half", "float"] {
    for length in ["", "2", "3", "4"] {
        print("native \(type)\(length) Sample(Texture1D<\(type)\(length)>, sampler, float location);")
        print("native \(type)\(length) Sample(Texture1D<\(type)\(length)>, sampler, float location, int offset);")
        print("native \(type)\(length) Load(Texture1D<\(type)\(length)>, int2 location);")
        print("native \(type)\(length) Load(Texture1D<\(type)\(length)>, int2 location, int offset);")
        print("native void GetDimensions(Texture1D<\(type)\(length)>, uint MipLevel, thread uint* Width, thread uint* NumberOfLevels);")
        print()
        print("native \(type)\(length) Sample(Texture1DArray<\(type)\(length)>, sampler, float2 location);")
        print("native \(type)\(length) Sample(Texture1DArray<\(type)\(length)>, sampler, float2 location, int offset);")
        print("native \(type)\(length) Load(Texture1DArray<\(type)\(length)>, int3 location);")
        print("native \(type)\(length) Load(Texture1DArray<\(type)\(length)>, int3 location, int offset);")
        print("native void GetDimensions(Texture1DArray<\(type)\(length)>, uint MipLevel, thread uint* Width, thread uint* Elements, thread uint* NumberOfLevels);")
        print()
        print("native \(type)\(length) Sample(Texture2D<\(type)\(length)>, sampler, float2 location);")
        print("native \(type)\(length) Sample(Texture2D<\(type)\(length)>, sampler, float2 location, int2 offset);")
        print("native \(type)\(length) SampleBias(Texture2D<\(type)\(length)>, sampler, float2 location, float Bias);")
        print("native \(type)\(length) SampleBias(Texture2D<\(type)\(length)>, sampler, float2 location, float Bias, int2 offset);")
        print("native \(type)\(length) SampleGrad(Texture2D<\(type)\(length)>, sampler, float2 location, float2 DDX, float2 DDY);")
        print("native \(type)\(length) SampleGrad(Texture2D<\(type)\(length)>, sampler, float2 location, float2 DDX, float2 DDY, int2 offset);")
        print("native \(type)\(length) SampleLevel(Texture2D<\(type)\(length)>, sampler, float2 location, float LOD);")
        print("native \(type)\(length) SampleLevel(Texture2D<\(type)\(length)>, sampler, float2 location, float LOD, int2 offset);")
        print("native \(type)4 Gather(Texture2D<\(type)\(length)>, sampler, float2 location);")
        print("native \(type)4 Gather(Texture2D<\(type)\(length)>, sampler, float2 location, int2 offset);")
        print("native \(type)4 GatherRed(Texture2D<\(type)\(length)>, sampler, float2 location);")
        print("native \(type)4 GatherRed(Texture2D<\(type)\(length)>, sampler, float2 location, int2 offset);")
        print("native \(type)4 GatherGreen(Texture2D<\(type)\(length)>, sampler, float2 location);")
        print("native \(type)4 GatherGreen(Texture2D<\(type)\(length)>, sampler, float2 location, int2 offset);")
        print("native \(type)4 GatherBlue(Texture2D<\(type)\(length)>, sampler, float2 location);")
        print("native \(type)4 GatherBlue(Texture2D<\(type)\(length)>, sampler, float2 location, int2 offset);")
        print("native \(type)4 GatherAlpha(Texture2D<\(type)\(length)>, sampler, float2 location);")
        print("native \(type)4 GatherAlpha(Texture2D<\(type)\(length)>, sampler, float2 location, int2 offset);")
        print("native \(type)\(length) Load(Texture2D<\(type)\(length)>, int3 location);")
        print("native \(type)\(length) Load(Texture2D<\(type)\(length)>, int3 location, int2 offset);")
        print("native void GetDimensions(Texture2D<\(type)\(length)>, uint MipLevel, thread uint* Width, thread uint* Height, thread uint* NumberOfLevels);")
        print()
        print("native \(type)\(length) Sample(Texture2DArray<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)\(length) Sample(Texture2DArray<\(type)\(length)>, sampler, float3 location, int2 offset);")
        print("native \(type)\(length) SampleBias(Texture2DArray<\(type)\(length)>, sampler, float3 location, float Bias);")
        print("native \(type)\(length) SampleBias(Texture2DArray<\(type)\(length)>, sampler, float3 location, float Bias, int2 offset);")
        print("native \(type)\(length) SampleGrad(Texture2DArray<\(type)\(length)>, sampler, float3 location, float2 DDX, float2 DDY);")
        print("native \(type)\(length) SampleGrad(Texture2DArray<\(type)\(length)>, sampler, float3 location, float2 DDX, float2 DDY, int2 offset);")
        print("native \(type)\(length) SampleLevel(Texture2DArray<\(type)\(length)>, sampler, float3 location, float LOD);")
        print("native \(type)\(length) SampleLevel(Texture2DArray<\(type)\(length)>, sampler, float3 location, float LOD, int2 offset);")
        print("native \(type)4 Gather(Texture2DArray<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)4 Gather(Texture2DArray<\(type)\(length)>, sampler, float3 location, int2 offset);")
        print("native \(type)4 GatherRed(Texture2DArray<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)4 GatherRed(Texture2DArray<\(type)\(length)>, sampler, float3 location, int2 offset);")
        print("native \(type)4 GatherGreen(Texture2DArray<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)4 GatherGreen(Texture2DArray<\(type)\(length)>, sampler, float3 location, int2 offset);")
        print("native \(type)4 GatherBlue(Texture2DArray<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)4 GatherBlue(Texture2DArray<\(type)\(length)>, sampler, float3 location, int2 offset);")
        print("native \(type)4 GatherAlpha(Texture2DArray<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)4 GatherAlpha(Texture2DArray<\(type)\(length)>, sampler, float3 location, int2 offset);")
        print("native \(type)\(length) Load(Texture2DArray<\(type)\(length)>, int4 location);")
        print("native \(type)\(length) Load(Texture2DArray<\(type)\(length)>, int4 location, int2 offset);")
        print("native void GetDimensions(Texture2DArray<\(type)\(length)>, uint MipLevel, thread uint* Width, thread uint* Height, thread uint* Elements, thread uint* NumberOfLevels);")
        print()
        print("native \(type)\(length) Sample(Texture3D<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)\(length) Sample(Texture3D<\(type)\(length)>, sampler, float3 location, int3 offset);")
        print("native \(type)4 Gather(Texture3D<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)4 Gather(Texture3D<\(type)\(length)>, sampler, float3 location, int3 offset);")
        print("native \(type)4 GatherRed(Texture3D<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)4 GatherRed(Texture3D<\(type)\(length)>, sampler, float3 location, int3 offset);")
        print("native \(type)4 GatherGreen(Texture3D<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)4 GatherGreen(Texture3D<\(type)\(length)>, sampler, float3 location, int3 offset);")
        print("native \(type)4 GatherBlue(Texture3D<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)4 GatherBlue(Texture3D<\(type)\(length)>, sampler, float3 location, int3 offset);")
        print("native \(type)4 GatherAlpha(Texture3D<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)4 GatherAlpha(Texture3D<\(type)\(length)>, sampler, float3 location, int3 offset);")
        print("native \(type)\(length) Load(Texture3D<\(type)\(length)>, int4 location);")
        print("native \(type)\(length) Load(Texture3D<\(type)\(length)>, int4 location, int3 offset);")
        print("native void GetDimensions(Texture3D<\(type)\(length)>, uint MipLevel, thread uint* Width, thread uint* Height, thread uint* Depth, thread uint* NumberOfLevels);")
        print()
        print("native \(type)\(length) Sample(TextureCube<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)\(length) SampleBias(TextureCube<\(type)\(length)>, sampler, float3 location, float Bias);")
        print("native \(type)\(length) SampleGrad(TextureCube<\(type)\(length)>, sampler, float3 location, float3 DDX, float3 DDY);")
        print("native \(type)\(length) SampleLevel(TextureCube<\(type)\(length)>, sampler, float3 location, float LOD);")
        print("native \(type)4 Gather(TextureCube<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)4 GatherRed(TextureCube<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)4 GatherGreen(TextureCube<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)4 GatherBlue(TextureCube<\(type)\(length)>, sampler, float3 location);")
        print("native \(type)4 GatherAlpha(TextureCube<\(type)\(length)>, sampler, float3 location);")
        print("native void GetDimensions(TextureCube<\(type)\(length)>, uint MipLevel, thread uint* Width, thread uint* Height, thread uint* NumberOfLevels);")
        print()
        print("native void GetDimensions(RWTexture1D<\(type)\(length)>, thread uint* Width);")
        print("native void GetDimensions(RWTexture1D<\(type)\(length)>, thread float* Width);")
        print("native \(type)\(length) Load(RWTexture1D<\(type)\(length)>, int location);")
        print("native void Store(RWTexture1D<\(type)\(length)>, \(type)\(length), uint location);")
        print()
        print("native void GetDimensions(RWTexture1DArray<\(type)\(length)>, thread uint* Width, thread uint* Elements);")
        print("native void GetDimensions(RWTexture1DArray<\(type)\(length)>, thread float* Width, thread uint* Elements);")
        print("native \(type)\(length) Load(RWTexture1DArray<\(type)\(length)>, int2 location);")
        print("native void Store(RWTexture1DArray<\(type)\(length)>, \(type)\(length), uint2 location);")
        print()
        print("native void GetDimensions(RWTexture2D<\(type)\(length)>, thread uint* Width, thread uint* Height);")
        print("native void GetDimensions(RWTexture2D<\(type)\(length)>, thread float* Width, thread float* Height);")
        print("native \(type)\(length) Load(RWTexture2D<\(type)\(length)>, int2 location);")
        print("native void Store(RWTexture2D<\(type)\(length)>, \(type)\(length), uint2 location);")
        print()
        print("native void GetDimensions(RWTexture2DArray<\(type)\(length)>, thread uint* Width, thread uint* Height, thread uint* Elements);")
        print("native void GetDimensions(RWTexture2DArray<\(type)\(length)>, thread float* Width, thread float* Height, thread float* Elements);")
        print("native \(type)\(length) Load(RWTexture2DArray<\(type)\(length)>, int3 location);")
        print("native void Store(RWTexture2DArray<\(type)\(length)>, \(type)\(length), uint3 location);")
        print()
        print("native void GetDimensions(RWTexture3D<\(type)\(length)>, thread uint* Width, thread uint* Height, thread uint* Depth);")
        print("native void GetDimensions(RWTexture3D<\(type)\(length)>, thread float* Width, thread float* Height, thread float* Depth);")
        print("native \(type)\(length) Load(RWTexture3D<\(type)\(length)>, int3 location);")
        print("native void Store(RWTexture3D<\(type)\(length)>, \(type)\(length), uint3 location);")
        print()
    }
}

for type in ["half", "float"] {
    print("native \(type) Sample(TextureDepth2D<\(type)>, sampler, float2 location);")
    print("native \(type) Sample(TextureDepth2D<\(type)>, sampler, float2 location, int2 offset);")
    print("native \(type) SampleCmp(TextureDepth2D<\(type)>, SamplerComparisonState, float2 location, float CompareValue);")
    print("native \(type) SampleCmp(TextureDepth2D<\(type)>, SamplerComparisonState, float2 location, float CompareValue, int2 offset);")
    print("native \(type) SampleCmpLevelZero(TextureDepth2D<\(type)>, SamplerComparisonState, float2 location, float CompareValue);")
    print("native \(type) SampleCmpLevelZero(TextureDepth2D<\(type)>, SamplerComparisonState, float2 location, float CompareValue, int2 offset);")
    print("native \(type) SampleBias(TextureDepth2D<\(type)>, sampler, float2 location, float Bias);")
    print("native \(type) SampleBias(TextureDepth2D<\(type)>, sampler, float2 location, float Bias, int2 offset);")
    print("native \(type) SampleGrad(TextureDepth2D<\(type)>, sampler, float2 location, float2 DDX, float2 DDY);")
    print("native \(type) SampleGrad(TextureDepth2D<\(type)>, sampler, float2 location, float2 DDX, float2 DDY, int2 offset);")
    print("native \(type) SampleLevel(TextureDepth2D<\(type)>, sampler, float2 location, float LOD);")
    print("native \(type) SampleLevel(TextureDepth2D<\(type)>, sampler, float2 location, float LOD, int2 offset);")
    print("native \(type) Gather(TextureDepth2D<\(type)>, sampler, float2 location);")
    print("native \(type) Gather(TextureDepth2D<\(type)>, sampler, float2 location, int2 offset);")
    print("native \(type) GatherRed(TextureDepth2D<\(type)>, sampler, float2 location);")
    print("native \(type) GatherRed(TextureDepth2D<\(type)>, sampler, float2 location, int2 offset);")
    print("native \(type) GatherGreen(TextureDepth2D<\(type)>, sampler, float2 location);")
    print("native \(type) GatherGreen(TextureDepth2D<\(type)>, sampler, float2 location, int2 offset);")
    print("native \(type) GatherBlue(TextureDepth2D<\(type)>, sampler, float2 location);")
    print("native \(type) GatherBlue(TextureDepth2D<\(type)>, sampler, float2 location, int2 offset);")
    print("native \(type) GatherAlpha(TextureDepth2D<\(type)>, sampler, float2 location);")
    print("native \(type) GatherAlpha(TextureDepth2D<\(type)>, sampler, float2 location, int2 offset);")
    print("native \(type) GatherCmp(TextureDepth2D<\(type)>, SamplerComparisonState, float2 location, float compare_value);")
    print("native \(type) GatherCmp(TextureDepth2D<\(type)>, SamplerComparisonState, float2 location, float compare_value, int2 offset);")
    print("native \(type) GatherCmpRed(TextureDepth2D<\(type)>, SamplerComparisonState, float2 location, float compare_value);")
    print("native \(type) GatherCmpRed(TextureDepth2D<\(type)>, SamplerComparisonState, float2 location, float compare_value, int2 offset);")
    print("native \(type) GatherCmpGreen(TextureDepth2D<\(type)>, SamplerComparisonState, float2 location, float compare_value);")
    print("native \(type) GatherCmpGreen(TextureDepth2D<\(type)>, SamplerComparisonState, float2 location, float compare_value, int2 offset);")
    print("native \(type) GatherCmpBlue(TextureDepth2D<\(type)>, SamplerComparisonState, float2 location, float compare_value);")
    print("native \(type) GatherCmpBlue(TextureDepth2D<\(type)>, SamplerComparisonState, float2 location, float compare_value, int2 offset);")
    print("native \(type) GatherCmpAlpha(TextureDepth2D<\(type)>, SamplerComparisonState, float2 location, float compare_value);")
    print("native \(type) GatherCmpAlpha(TextureDepth2D<\(type)>, SamplerComparisonState, float2 location, float compare_value, int2 offset);")
    print("native \(type) Load(TextureDepth2D<\(type)>, int3 location);")
    print("native \(type) Load(TextureDepth2D<\(type)>, int3 location, int2 offset);")
    print("native void GetDimensions(TextureDepth2D<\(type)>, uint MipLevel, thread uint* Width, thread uint* Height, thread uint* NumberOfLevels);")
    print()
    print("native \(type) Sample(TextureDepth2DArray<\(type)>, sampler, float3 location);")
    print("native \(type) Sample(TextureDepth2DArray<\(type)>, sampler, float3 location, int2 offset);")
    print("native \(type) SampleCmp(TextureDepth2DArray<\(type)>, SamplerComparisonState, float3 location, float CompareValue);")
    print("native \(type) SampleCmp(TextureDepth2DArray<\(type)>, SamplerComparisonState, float3 location, float CompareValue, int2 offset);")
    print("native \(type) SampleCmpLevelZero(TextureDepth2DArray<\(type)>, SamplerComparisonState, float3 location, float CompareValue);")
    print("native \(type) SampleCmpLevelZero(TextureDepth2DArray<\(type)>, SamplerComparisonState, float3 location, float CompareValue, int2 offset);")
    print("native \(type) SampleBias(TextureDepth2DArray<\(type)>, sampler, float3 location, float Bias);")
    print("native \(type) SampleBias(TextureDepth2DArray<\(type)>, sampler, float3 location, float Bias, int2 offset);")
    print("native \(type) SampleGrad(TextureDepth2DArray<\(type)>, sampler, float3 location, float2 DDX, float2 DDY);")
    print("native \(type) SampleGrad(TextureDepth2DArray<\(type)>, sampler, float3 location, float2 DDX, float2 DDY, int2 offset);")
    print("native \(type) SampleLevel(TextureDepth2DArray<\(type)>, sampler, float3 location, float LOD);")
    print("native \(type) SampleLevel(TextureDepth2DArray<\(type)>, sampler, float3 location, float LOD, int2 offset);")
    print("native \(type) Gather(TextureDepth2DArray<\(type)>, sampler, float3 location);")
    print("native \(type) Gather(TextureDepth2DArray<\(type)>, sampler, float3 location, int2 offset);")
    print("native \(type) GatherRed(TextureDepth2DArray<\(type)>, sampler, float3 location);")
    print("native \(type) GatherRed(TextureDepth2DArray<\(type)>, sampler, float3 location, int2 offset);")
    print("native \(type) GatherGreen(TextureDepth2DArray<\(type)>, sampler, float3 location);")
    print("native \(type) GatherGreen(TextureDepth2DArray<\(type)>, sampler, float3 location, int2 offset);")
    print("native \(type) GatherBlue(TextureDepth2DArray<\(type)>, sampler, float3 location);")
    print("native \(type) GatherBlue(TextureDepth2DArray<\(type)>, sampler, float3 location, int2 offset);")
    print("native \(type) GatherAlpha(TextureDepth2DArray<\(type)>, sampler, float3 location);")
    print("native \(type) GatherAlpha(TextureDepth2DArray<\(type)>, sampler, float3 location, int2 offset);")
    print("native \(type) GatherCmp(TextureDepth2DArray<\(type)>, SamplerComparisonState, float3 location, float compare_value);")
    print("native \(type) GatherCmp(TextureDepth2DArray<\(type)>, SamplerComparisonState, float3 location, float compare_value, int2 offset);")
    print("native \(type) GatherCmpRed(TextureDepth2DArray<\(type)>, SamplerComparisonState, float3 location, float compare_value);")
    print("native \(type) GatherCmpRed(TextureDepth2DArray<\(type)>, SamplerComparisonState, float3 location, float compare_value, int2 offset);")
    print("native \(type) GatherCmpGreen(TextureDepth2DArray<\(type)>, SamplerComparisonState, float3 location, float compare_value);")
    print("native \(type) GatherCmpGreen(TextureDepth2DArray<\(type)>, SamplerComparisonState, float3 location, float compare_value, int2 offset);")
    print("native \(type) GatherCmpBlue(TextureDepth2DArray<\(type)>, SamplerComparisonState, float3 location, float compare_value);")
    print("native \(type) GatherCmpBlue(TextureDepth2DArray<\(type)>, SamplerComparisonState, float3 location, float compare_value, int2 offset);")
    print("native \(type) GatherCmpAlpha(TextureDepth2DArray<\(type)>, SamplerComparisonState, float3 location, float compare_value);")
    print("native \(type) GatherCmpAlpha(TextureDepth2DArray<\(type)>, SamplerComparisonState, float3 location, float compare_value, int2 offset);")
    print("native \(type) Load(TextureDepth2DArray<\(type)>, int4 location);")
    print("native \(type) Load(TextureDepth2DArray<\(type)>, int4 location, int2 offset);")
    print("native void GetDimensions(TextureDepth2DArray<\(type)>, uint MipLevel, thread uint* Width, thread uint* Height, thread uint* Elements, thread uint* NumberOfLevels);")
    print()
    print("native \(type) Sample(TextureDepthCube<\(type)>, sampler, float3 location);")
    print("native \(type) SampleCmp(TextureDepthCube<\(type)>, SamplerComparisonState, float3 location, float CompareValue);")
    print("native \(type) SampleCmpLevelZero(TextureDepthCube<\(type)>, SamplerComparisonState, float3 location, float CompareValue);")
    print("native \(type) SampleBias(TextureDepthCube<\(type)>, sampler, float3 location, float Bias);")
    print("native \(type) SampleGrad(TextureDepthCube<\(type)>, sampler, float3 location, float2 DDX, float2 DDY);")
    print("native \(type) SampleLevel(TextureDepthCube<\(type)>, sampler, float3 location, float LOD);")
    print("native \(type) Gather(TextureDepthCube<\(type)>, sampler, float3 location);")
    print("native \(type) GatherRed(TextureDepthCube<\(type)>, sampler, float3 location);")
    print("native \(type) GatherGreen(TextureDepthCube<\(type)>, sampler, float3 location);")
    print("native \(type) GatherBlue(TextureDepthCube<\(type)>, sampler, float3 location);")
    print("native \(type) GatherAlpha(TextureDepthCube<\(type)>, sampler, float3 location);")
    print("native \(type) GatherCmp(TextureDepthCube<\(type)>, SamplerComparisonState, float3 location, float compare_value);")
    print("native \(type) GatherCmpRed(TextureDepthCube<\(type)>, SamplerComparisonState, float3 location, float compare_value);")
    print("native \(type) GatherCmpGreen(TextureDepthCube<\(type)>, SamplerComparisonState, float3 location, float compare_value);")
    print("native \(type) GatherCmpBlue(TextureDepthCube<\(type)>, SamplerComparisonState, float3 location, float compare_value);")
    print("native \(type) GatherCmpAlpha(TextureDepthCube<\(type)>, SamplerComparisonState, float3 location, float compare_value);")
    print("native \(type) Load(TextureDepthCube<\(type)>, int4 location);")
    print("native void GetDimensions(TextureDepthCube<\(type)>, uint MipLevel, thread uint* Width, thread uint* Height, thread uint* NumberOfLevels);")
    print()
    print("native void GetDimensions(RWTextureDepth2D<\(type)>, thread uint* Width, thread uint* Height);")
    print("native void GetDimensions(RWTextureDepth2D<\(type)>, thread float* Width, thread float* Height);")
    print("native \(type) Load(RWTextureDepth2D<\(type)>, int2 location);")
    print("native void Store(RWTextureDepth2D<\(type)>, \(type), uint2 location);")
    print()
    print("native void GetDimensions(RWTextureDepth2DArray<\(type)>, thread uint* Width, thread uint* Height, thread uint* Elements);")
    print("native void GetDimensions(RWTextureDepth2DArray<\(type)>, thread float* Width, thread float* Height, thread float* Elements);")
    print("native \(type) Load(RWTextureDepth2DArray<\(type)>, int3 location);")
    print("native void Store(RWTextureDepth2DArray<\(type)>, \(type), uint3 location);")
    print()
}
*/
